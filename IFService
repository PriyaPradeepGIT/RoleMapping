package com.optum.user.account.service.impl;


import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.Session;
import com.optum.user.account.config.InactivateFtpConfig;


import com.optum.user.account.domain.InactivateUsersResponse;
import com.optum.user.account.exceptions.FtpErrorException;
import com.optum.user.account.repository.InactiveUserRepository;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.net.ftp.FTPClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.*;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import com.optum.user.account.service.InactivityFeedService;

@Service
@Slf4j
public class InactivityFeedServiceImpl implements InactivityFeedService {

    @Value("${AppID}")
    private String appId;

    @Value("${AppName}")
    private String appName;

    @Value("${EnvID}")
    private String envId;


    private static final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
    private static final String header ="LastName,FirstName,UniqueIdentifier,RequestType,RoleName,UserId,AccountType\n";


    public final InactivateFtpConfig inactivateFtpConfig;


    @Autowired
    public InactiveUserRepository inactiveUserRepository;

    @Autowired
    public InactivityFeedServiceImpl(InactivateFtpConfig inactivateFtpConfig)
    {
        this.inactivateFtpConfig = inactivateFtpConfig;
    }


    @Transactional(rollbackFor = Exception.class)
    public InactivateUsersResponse createInactivityFeed() {
        log.info("Begin Inactivity Feed FTP :: Execution Time - {}", dateTimeFormatter.format(LocalDateTime.now()));

        List<String> inactiveUsers = inactiveUserRepository.findInactiveUserIds();
        //List<String> inactiveUsers =new ArrayList<>();
        InactivateUsersResponse inactivateResponse = new InactivateUsersResponse();
        inactivateResponse.setInactiveUsers(inactiveUsers);
        inactivateResponse.setApplicationName(appName);
        inactivateResponse.setTimestamp(OffsetDateTime.now());
        try {
            String parserType = "20";
            String fileName = appId + "." + envId + "."+ parserType +".InactiveAccountsFile_"
                    + LocalDate.now().format(DateTimeFormatter.ofPattern("MMddyyyy")) ;
            File tempFile = createCsvFile(inactiveUsers,fileName);//create temp file
            sendCsvFileUsingSFTP(tempFile.getAbsolutePath());//send the temp file  to transfer

        } catch (Exception e) {
            inactivateResponse.setTimestamp(OffsetDateTime.now());
            inactivateResponse.setException(e.getMessage());
            return inactivateResponse;
        }
        log.info("End Inactivity Feed FTP :: Execution Time - {}", dateTimeFormatter.format(LocalDateTime.now()));
        inactivateResponse.setTimestamp(OffsetDateTime.now());
        return inactivateResponse;
    }

    /**
     * Creates a CSV file with the inactive users.
     *
     * @param inactiveUsers List of inactive users to be written to the CSV file.
     * @throws IOException If an I/O error occurs while writing the file.
     */
    private File createCsvFile(List<String> inactiveUsers,String fileName) throws IOException {

        File tempFile = File.createTempFile(fileName, ".csv");
        log.info("Temporary file created: {}", tempFile);

        try (PrintWriter pw = new PrintWriter(new FileWriter(tempFile))) {
            pw.write(header);
           // pw.write(",,,remove,,ahembry,\n");
            if(inactiveUsers!=null) {
                for (String inactiveUser : inactiveUsers) {
                    log.info(inactiveUser);
                    pw.write(",,,remove,," + inactiveUser + ",\n");
                }
            }
            pw.flush();
        } catch (Exception e) {
            log.error("Context :", e);
            throw e; // Rethrow exception to propagate so we don't mark records inactive that haven't been processed
        }
       return tempFile;
    }

    /**
     * Sends the CSV file to the SFTP server.
     *
     * @param fileName The name of the file to be sent.
     * @throws FtpErrorException If an error occurs during SFTP transfer.
     * @throws IOException       If an I/O error occurs while sending the file.
     */
    private void sendCsvFileUsingSFTP(String fileName) throws FtpErrorException, IOException {
        JSch jsch = new JSch();
        Session session = null;
        ChannelSftp sftpChannel = null;
        FileInputStream fis = null;

        try {
            log.info("Connecting to SFTP server: {}", inactivateFtpConfig.getFtpHost());
            session = jsch.getSession(inactivateFtpConfig.getFtpUsername(), inactivateFtpConfig.getFtpHost(), 22);
            session.setPassword(inactivateFtpConfig.getFtpPassword());
            session.setConfig("StrictHostKeyChecking", "no");
            session.connect();
            log.info("Connected to session");

            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
            log.info("Connected to sftpchannel");
            if(sftpChannel.isConnected()) {
                Vector<ChannelSftp.LsEntry> list = sftpChannel.ls(".");
                for (ChannelSftp.LsEntry entry : list) {
                    log.info("Remote file: {}", entry.getFilename());
                }
                log.info("Configured ftp directory: {}", inactivateFtpConfig.getFtpDirectory());
                sftpChannel.cd("RxBRIDGInactivityFeed");


                File file = new File(fileName);
                log.info("Local file path: {}", file.getAbsolutePath());
                log.info("File exists: {}, Can read: {}", file.exists(), file.canRead());
                log.info("Remote working directory: {}", sftpChannel.pwd());
                log.info("Remote upload file name: {}", file.getName());
                fis = new FileInputStream(file);
                sftpChannel.put(fis, file.getName());

            }

        } catch (Exception e) {
            log.error("SFTP Error: ", e);
            throw new FtpErrorException("SFTP Error: " + e.getMessage());
        } finally {
            if (fis != null) {
                fis.close();
            }
            if (sftpChannel != null) {
                sftpChannel.disconnect();
            }
            if (session != null) {
                session.disconnect();
            }
        }
    }

}

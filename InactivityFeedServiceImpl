@Service
@Slf4j
public class InactivityFeedServiceImpl implements InactivityFeedService {

    @Value("${AppID}")
    private String appId;

    @Value("${EnvID}")
    private String envId;


    private static final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("HH:mm:ss");
    private static final String header ="LastName,FirstName,UniqueIdentifier,RequestType,RoleName,UserId,AccountType\n";

    public static final String LOG_CONTEXT = "context";
    private InactivateFtpConfig inactivateFtpConfig;


    @Autowired
    private InactiveUserRepository inactiveUserRepository;

    @Autowired
    public InactivityFeedServiceImpl(InactivateFtpConfig inactivateFtpConfig)
    {
        this.inactivateFtpConfig = inactivateFtpConfig;
    }


    @Transactional(rollbackFor = Exception.class)
    public InactivateUsersResponse createInactivityFeed() {
        log.info("Begin Inactivity Feed FTP :: Execution Time - {}", dateTimeFormatter.format(LocalDateTime.now()));

       // List<String> inactiveUsers = inactiveUserRepository.findInactiveUserIds();
        List<String> inactiveUsers =null;
        InactivateUsersResponse inactivateResponse = new InactivateUsersResponse();
        inactivateResponse.inactiveUsers(inactiveUsers);
        String applicationName = "Rx-BRIDG";
        inactivateResponse.applicationName(applicationName);
        inactivateResponse.timestamp(OffsetDateTime.now());


//        if (inactiveUsers.isEmpty()) {
//            log.info("No inactive users to process");
//            return inactivateResponse;
//        }


        try {
            String parserType = "20";
            String fileName = appId + "." + envId + "."+ parserType +".InactiveAccounts_"
                    + LocalDate.now().format(DateTimeFormatter.ofPattern("MMddyyyy")) + ".csv";
            createCsvFile(inactiveUsers,fileName);
           // sendCsvFile(fileName);
            sendCsvFileUsingSFTP(fileName);

        } catch (Exception e) {
            inactivateResponse.timestamp(OffsetDateTime.now());
            inactivateResponse.exception(e.getMessage());
            return inactivateResponse;
        }
        log.info("End Inactivity Feed FTP :: Execution Time - {}", dateTimeFormatter.format(LocalDateTime.now()));
        inactivateResponse.timestamp(OffsetDateTime.now());
        return inactivateResponse;
    }

    /**
     * Creates a CSV file with the inactive users.
     *
     * @param inactiveUsers List of inactive users to be written to the CSV file.
     * @throws IOException If an I/O error occurs while writing the file.
     */
    private void createCsvFile(List<String> inactiveUsers,String fileName) throws IOException {

        try (PrintWriter pw = new PrintWriter(new FileWriter(fileName))) {
            pw.write(header);

            if(inactiveUsers!=null) {
                for (String inactiveUser : inactiveUsers) {
                    log.info(inactiveUser);
                    pw.write(",,,remove,," + inactiveUser + ",\n");
                }
            }
            pw.flush();
        } catch (Exception e) {
            log.error(LOG_CONTEXT, e);
            throw e; // Rethrow exception to propagate so we don't mark records inactive that haven't been processed
        }
    }

    private void sendCsvFile(String fileName) throws FtpErrorException, IOException {
        FTPClient client = new FTPClient();
        FileInputStream fis = null;

        try {
            client.connect(inactivateFtpConfig.getFtpHost());
            if (client.isConnected()) {

                if (client.login(inactivateFtpConfig.getFtpUsername(), inactivateFtpConfig.getFtpPassword())) {
                    client.changeWorkingDirectory(inactivateFtpConfig.getFtpDirectory());
                    client.enterLocalPassiveMode();
                    fis = new FileInputStream(fileName);
                    if (!client.storeFile(fileName, fis)) {
                        throw new FtpErrorException("FTP Error: Could not store the file");
                    }
                    client.logout();
                } else {
                    client.logout();
                    log.info("FTP Error: Could not login");
                    throw new FtpErrorException("FTP Error: Could not login");
                }

            } else {
                log.info("FTP Error: Could not connect to server");
                throw new FtpErrorException("FTP Error: Could not connect to server");
            }

        } finally {
                if (fis != null) {
                    fis.close();
                }

                if (client.isConnected()) {
                    client.disconnect();
                }
                }
    }

    private void sendCsvFileUsingSFTP(String fileName) throws FtpErrorException, IOException {
        JSch jsch = new JSch();
        Session session = null;
        ChannelSftp sftpChannel = null;
        FileInputStream fis = null;

        try {
            session = jsch.getSession(inactivateFtpConfig.getFtpUsername(), inactivateFtpConfig.getFtpHost(), 22);
            session.setPassword(inactivateFtpConfig.getFtpPassword());
            session.setConfig("StrictHostKeyChecking", "no");
            session.setTimeout(30000);
            session.connect();

            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();
            sftpChannel.cd(inactivateFtpConfig.getFtpDirectory());

            fis = new FileInputStream(fileName);
            sftpChannel.put(fis, fileName);

        } catch (Exception e) {
            log.error("SFTP Error: ", e);
            throw new FtpErrorException("SFTP Error: " + e.getMessage());
        } finally {
            if (fis != null) {
                fis.close();
            }
            if (sftpChannel != null) {
                sftpChannel.disconnect();
            }
            if (session != null) {
                session.disconnect();
            }
        }
    }



}

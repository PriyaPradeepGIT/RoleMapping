package com.example.security.service;

import io.jsonwebtoken.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.MockitoAnnotations;
import org.springframework.test.util.ReflectionTestUtils;

import java.util.Date;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class JwtValidationServiceTest {

    @InjectMocks
    private JwtValidationService jwtValidationService;

    private String validToken;
    private String expiredToken;
    private String invalidToken;
    private String malformedToken;

    private final String secretKey = "test-secret-key";
    private final String issuer = "test-issuer";

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        // Inject secretKey and issuer into the JwtValidationService
        ReflectionTestUtils.setField(jwtValidationService, "secretKey", secretKey);
        ReflectionTestUtils.setField(jwtValidationService, "issuer", issuer);

        // Generate a valid JWT token
        validToken = Jwts.builder()
                .setSubject("testuser")
                .setIssuer(issuer)
                .setExpiration(new Date(System.currentTimeMillis() + 60000)) // valid for 1 minute
                .claim("roles", List.of("ROLE_USER", "ROLE_ADMIN"))
                .signWith(SignatureAlgorithm.HS256, secretKey)
                .compact();

        // Generate an expired JWT token
        expiredToken = Jwts.builder()
                .setSubject("testuser")
                .setIssuer(issuer)
                .setExpiration(new Date(System.currentTimeMillis() - 1000)) // expired 1 second ago
                .claim("roles", List.of("ROLE_USER"))
                .signWith(SignatureAlgorithm.HS256, secretKey)
                .compact();

        // Generate an invalid JWT token by tampering with the signature
        invalidToken = validToken.substring(0, validToken.length() - 5) + "abcde";

        // Generate a malformed token
        malformedToken = "malformed.jwt.token";
    }

    @Test
    public void testValidateToken_ValidToken() {
        boolean isValid = jwtValidationService.validateToken(validToken);
        assertTrue(isValid, "A valid token should return true.");
    }

    @Test
    public void testValidateToken_ExpiredToken() {
        boolean isValid = jwtValidationService.validateToken(expiredToken);
        assertFalse(isValid, "An expired token should return false.");
    }

    @Test
    public void testValidateToken_InvalidToken() {
        boolean isValid = jwtValidationService.validateToken(invalidToken);
        assertFalse(isValid, "An invalid token should return false.");
    }

    @Test
    public void testValidateToken_MalformedToken() {
        boolean isValid = jwtValidationService.validateToken(malformedToken);
        assertFalse(isValid, "A malformed token should return false.");
    }

    @Test
    public void testGetUsernameFromToken_ValidToken() {
        String username = jwtValidationService.getUsernameFromToken(validToken);
        assertEquals("testuser", username, "The username should match the subject in the token.");
    }

    @Test
    public void testGetUsernameFromToken_InvalidToken() {
        assertThrows(SignatureException.class, () -> jwtValidationService.getUsernameFromToken(invalidToken),
                "Invalid tokens should throw a SignatureException.");
    }

    @Test
    public void testGetRolesFromToken_ValidToken() {
        List<String> roles = jwtValidationService.getRolesFromToken(validToken);
        assertNotNull(roles, "Roles should not be null.");
        assertTrue(roles.contains("ROLE_USER"), "Roles should include ROLE_USER.");
        assertTrue(roles.contains("ROLE_ADMIN"), "Roles should include ROLE_ADMIN.");
    }

    @Test
    public void testGetRolesFromToken_InvalidToken() {
        assertThrows(SignatureException.class, () -> jwtValidationService.getRolesFromToken(invalidToken),
                "Invalid tokens should throw a SignatureException.");
    }

    @Test
    public void testGetRolesFromToken_MalformedToken() {
        assertThrows(MalformedJwtException.class, () -> jwtValidationService.getRolesFromToken(malformedToken),
                "Malformed tokens should throw a MalformedJwtException.");
    }

    @Test
    public void testExceptionHandling_IncorrectSignatureKey() {
        // Alter secretKey for testing incorrect signature
        ReflectionTestUtils.setField(jwtValidationService, "secretKey", "wrong-secret-key");
        assertThrows(SignatureException.class, () -> jwtValidationService.validateToken(validToken),
                "Tokens signed with an incorrect key should throw a SignatureException.");
    }

    @Test
    public void testExceptionHandling_UnsupportedToken() {
        // Create an unsupported token
        String unsupportedToken = Jwts.builder()
                .setSubject("testuser")
                .signWith(SignatureAlgorithm.ES256, secretKey) // Unsupported algorithm
                .compact();

        assertThrows(UnsupportedJwtException.class, () -> jwtValidationService.validateToken(unsupportedToken),
                "Unsupported tokens should throw an UnsupportedJwtException.");
    }
}

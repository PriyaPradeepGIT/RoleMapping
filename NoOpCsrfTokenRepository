package com.yourcompany.security;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.web.server.csrf.ServerCsrfTokenRepository;
import org.springframework.security.web.server.csrf.CsrfToken;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

public class NoOpCsrfTokenRepository implements ServerCsrfTokenRepository {

    private static final Logger log = LoggerFactory.getLogger(NoOpCsrfTokenRepository.class);

    public NoOpCsrfTokenRepository() {
        log.warn("⚠️ CSRF token repository is a no-op. This is intended for stateless JWT APIs only.");
    }

    @Override
    public Mono<CsrfToken> generateToken(ServerWebExchange exchange) {
        return Mono.empty(); // No CSRF token generated
    }

    @Override
    public Mono<Void> saveToken(ServerWebExchange exchange, CsrfToken token) {
        return Mono.empty(); // Token is not stored
    }

    @Override
    public Mono<CsrfToken> loadToken(ServerWebExchange exchange) {
        return Mono.empty(); // Always behaves as if no token is present
    }
}
import com.yourcompany.security.NoOpCsrfTokenRepository;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.web.server.SecurityWebFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {

        return http
                // ✅ Use custom no-op CSRF repo for stateless API
                .csrf(csrf -> csrf.csrfTokenRepository(new NoOpCsrfTokenRepository()))
                .authorizeExchange(exchange -> exchange
                        .pathMatchers("/authenticate", "/actuator/**").permitAll()
                        .anyExchange().authenticated()
                )
                .oauth2ResourceServer(oauth2 -> oauth2.jwt())
                .build();
    }
}


package com.yourcompany.security;

import org.junit.jupiter.api.Test;
import org.springframework.security.web.server.csrf.CsrfToken;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import static org.mockito.Mockito.mock;

class NoOpCsrfTokenRepositoryTest {

    NoOpCsrfTokenRepository repository = new NoOpCsrfTokenRepository();

    @Test
    void generateToken_returnsEmpty() {
        ServerWebExchange exchange = mock(ServerWebExchange.class);
        Mono<CsrfToken> result = repository.generateToken(exchange);
        StepVerifier.create(result).verifyComplete();
    }

    @Test
    void loadToken_returnsEmpty() {
        ServerWebExchange exchange = mock(ServerWebExchange.class);
        Mono<CsrfToken> result = repository.loadToken(exchange);
        StepVerifier.create(result).verifyComplete();
    }

    @Test
    void saveToken_returnsEmpty() {
        ServerWebExchange exchange = mock(ServerWebExchange.class);
        Mono<Void> result = repository.saveToken(exchange, null);
        StepVerifier.create(result).verifyComplete();
    }
}

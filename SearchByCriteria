@Repository
@Slf4j
public class ClaimTxnRepository {

    @Autowired
    private MongoDatabase mongoDatabase;

    public List<Document> searchByCriteria(ClaimTransaction claim) {
        MongoCollection<Document> collection = mongoDatabase.getCollection("ncpdp_generic_response");
        log.info("Inside searchByCriteria method");

        // Step 1: Execute the main aggregation pipeline
        List<Bson> pipeline = Arrays.asList(
                Aggregates.lookup("ncpdp-generic-request", "metadata.transactionId", "metadata.transactionId", "response"),
                Aggregates.unwind("$response"),
                Aggregates.lookup("ncpdp_generic_response", "metadata.transactionId", "metadata.transactionId", "request"),
                Aggregates.unwind("$request"),
                Aggregates.project(Projections.fields(
                        Projections.computed("claimNumber", "$metadata.rxclaimNumber"),
                        Projections.computed("cardholderId", "$response.insuranceSegment.cardholderId"),
                        Projections.computed("platform", "$metadata.environment"),
                        Projections.computed("bin", "$response.transactionHeaderSegment.binNumber"),
                        Projections.computed("pcn", "$response.transactionHeaderSegment.processorControlNumber"),
                        Projections.computed("group", "$response.insuranceSegment.groupId"),
                        Projections.computed("pharmacyId", "$response.metadata.pharmacyId"),
                        Projections.computed("timestamp", "$request.receiveTimestamp"),
                        Projections.computed("version", "$responseHeaderSegment.versionReleaseNumber"),
                        Projections.computed("origination", "$metadata.claimOriginationCode"),
                        Projections.computed("status", "$responseStatusSegment.transactionResponseStatus"),
                        Projections.computed("source", "INTERNAL"),
                        Projections.computed("duration", "200")
                )),
                Aggregates.limit(200)
        );

        // Execute the initial pipeline
        List<Document> aggregatedResults = collection.aggregate(pipeline).into(new ArrayList<>());

        // Step 2: Apply search criteria to the aggregated results
        return filterResultsByCriteria(aggregatedResults, claim);
    }

    private List<Document> filterResultsByCriteria(List<Document> results, ClaimTransaction claim) {
        return results.stream()
                .filter(document -> {
                    // Apply filtering logic
                    if (claim.getClaimNumber() != null && !document.getString("claimNumber").startsWith(claim.getClaimNumber().replace("*", ""))) {
                        return false;
                    }
                    if (claim.getCardHolderId() != null && !document.getString("cardholderId").startsWith(claim.getCardHolderId())) {
                        return false;
                    }
                    if (claim.getPlatform() != null && !claim.getPlatform().equals(document.getString("platform"))) {
                        return false;
                    }
                    if (claim.getBin() != null && !document.getString("bin").startsWith(claim.getBin())) {
                        return false;
                    }
                    if (claim.getPcn() != null && !document.getString("pcn").startsWith(claim.getPcn())) {
                        return false;
                    }
                    if (claim.getGroup() != null && !document.getString("group").startsWith(claim.getGroup())) {
                        return false;
                    }
                    if (claim.getPharmacyId() != null && !document.getString("pharmacyId").startsWith(claim.getPharmacyId())) {
                        return false;
                    }
                    if (claim.getDuration() != null && !document.getString("duration").startsWith(claim.getDuration())) {
                        return false;
                    }
                    if (claim.getSource() != null && !claim.getSource().equals(document.getString("source"))) {
                        return false;
                    }
                    if (claim.getOrigination() != null && !claim.getOrigination().equals(document.getString("origination"))) {
                        return false;
                    }
                    if (claim.getStatus() != null && !claim.getStatus().equals(document.getString("status"))) {
                        return false;
                    }
                    return true;
                })
                .collect(Collectors.toList());
    }
}
